// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "./client"
}

generator zod {
  provider       = "zod-prisma-types"
  output = "./zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExchangeCode {
  OKX
}

enum BotType {
  GridBot
}

enum UserRole {
  User
  Admin
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  displayName  String?
  role UserRole @default(User)
  password String

  exchangeAccounts ExchangeAccount[]
  smartTrades SmartTrade[]
  bots Bot[]
}

model ExchangeAccount {
  id Int @id @default(autoincrement())
  name String
  exchangeCode ExchangeCode // ExchangeCode

  // Credentials
  apiKey String
  secretKey String
  passphrase String?
  isDemoAccount Boolean @default(false)

  owner User @relation(fields: [ownerId], references: [id])
  ownerId Int
  createdAt DateTime @default(now())

  smartTrades SmartTrade[]
  bots Bot[]
}

model SmartTrade {
  id Int @id @default(autoincrement())
  type String // buy/sell/trade/ladder
  baseCurrency String
  quoteCurrency String
  symbolId String
  orders Order[]

  ref String? // user provided reference value

  exchangeAccount ExchangeAccount @relation(fields: [exchangeAccountId], references: [id])
  exchangeAccountId Int

  bot Bot? @relation(fields: [botId], references: [id])
  botId Int?

  owner User @relation(fields: [ownerId], references: [id])
  ownerId Int
}

model Order {
  id Int @id @default(autoincrement())
  status String @default("idle") // idle/placed/filled
  side String // buy/sell
  price Float
  filledPrice Float?
  quantity Float
  smartTrade SmartTrade @relation(fields: [smartTradeId], references: [id])
  smartTradeId Int
}

model Bot {
  id Int @id @default(autoincrement())
  type BotType
  name String
  baseCurrency String
  quoteCurrency String
  enabled Boolean @default(false)
  createdAt DateTime @default(now())

  settings Json // @todo gridLines

  smartTrades SmartTrade[]

  exchangeAccount ExchangeAccount @relation(fields: [exchangeAccountId], references: [id])
  exchangeAccountId Int

  owner User @relation(fields: [ownerId], references: [id])
  ownerId Int

  // @todo initialInvestment
}

// model BotState {
//   id Int @id @default(autoincrement())
//   type String // smartTradeRef
//   key String // index provided by user
//   value String // smartTrade.id
//   bot Bot @relation(fields: [botId], references: [id])
//   botId Int
// }
