# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Deploy to GKE

on:
  push:
    branches:
      - k8s

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: dev    # Add your cluster name here.
  GKE_ZONE: europe-west1-b   # Add your cluster zone here.
  GKE_BACKEND_DEPLOYMENT_NAME: bifrost-backend
  GKE_FRONTEND_DEPLOYMENT_NAME: bifrost-frontend
  GAR_LOCATION: europe-west1 # Location of the Artifact Registry
  GAR_REPOSITORY: bifrost-repo-testing # Google Artifact Registry repository name
  GAR_BACKEND_IMAGE_NAME: backend
  GAR_FRONTEND_IMAGE_NAME: frontend

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: testing

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use Artifact Registry Docker repository
      - name: Configure Docker
        run: |-
          gcloud auth configure-docker "$GAR_LOCATION-docker.pkg.dev"

      # Get the GKE credentials, so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      # [Backend] Build the Docker image
      - name: Build Backend
        run: |-
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$GAR_REPOSITORY/$GAR_BACKEND_IMAGE_NAME:latest" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            ./packages/backend

      # [Backend] Push the Docker image to Google Container Registry
      - name: Publish Backend
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$GAR_REPOSITORY/$GAR_BACKEND_IMAGE_NAME:latest"

      # [Frontend] Build the Docker image
      - name: Build Frontend
        run: |-
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$GAR_REPOSITORY/$GAR_FRONTEND_IMAGE_NAME:latest" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            ./packages/frontend

      # [Frontend] Push the Docker image to Google Container Registry
      - name: Publish Frontend
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$GAR_REPOSITORY/$GAR_FRONTEND_IMAGE_NAME:latest"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          ./kustomize build ./k8s | kubectl apply -f -
          kubectl rollout status deployment/$GKE_BACKEND_DEPLOYMENT_NAME
          kubectl rollout status deployment/$GKE_FRONTEND_DEPLOYMENT_NAME
          kubectl get services -o wide
